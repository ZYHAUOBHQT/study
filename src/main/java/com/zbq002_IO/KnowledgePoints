java.io.File类用于表示文件（目录）
File类只用于表示文件（目录）的信息（名称、大小等），不能用于文件内容的访问

1.编码问题
2.File类的使用
3.RandomAccessFile，Java提供的对文件内容的访问类，既可以读文件，也可以写文件。支持随机访问文件，可以访问文件的任意位置。
    (1) Java文件模型
        在硬盘上的文件是byte byte byte存储的，是数据的集合
    (2) 打开文件
        有两种模式，rw（读写），r（只读）
        RandomAccessFile raf = new RandomAccessFile(file, "rw");
        文件指针，打开文件时指针在开头pointer = 0;
    (3) 写方法
        raf.write(int); -----> 只写一个字节（后8位），同时指针指向下一个位置，准备再次写入。
    (4) 读方法
        int b = raf.read(); -----> 读一个字节
    (5) 文件读写完成以后一定要关闭（Oracle官方说明）
4.IO流（输入流、输出流）：字节流、字符流
    一.字节流
        (1) InputStream、OutputStream
            InputStream抽象了应用程序读取数据的方式
            OutputStream抽象了应用程序写出数据的方式
        (2) EOF = End 读到-1就读到结尾
        (3) 输入流基本方法
            int b = in.read(); // 读取一个字节无符号填充到int低八位，-1是EOF
            in.read(byte[] buf); // 读取数据填充到字节数组buf
            in.read(byte[] buf, int start, int size); // 读取数据到字节数组buf，从buf的start位置开始，存放size长度的数据
        (4) 输出流基本方法
            out.write(int b); // 写出一个byte到流
            out.write(byte[] buf); // 将buf字节数组都写入到流
            out.write(byte[] buf, int start, int size); // 字节数组buf从start位置开始写size长度的字节到流
        (5) FileInputStream -----> 具体实现了在文件上读取数据
        (6) FileOutPutStream -----> 实现了向文件中写出byte数据的方法
        (7) DataInputStream\DataOutputStream -----> 对"流"功能的扩展，可以更加方便地读取int、long、字符等数据类型。
            DataOutputStream
                writeInt() writeDouble() writeUTF()
        (8) BufferedInputStream\BufferedOutputStream
            这两个流类为IO提供了带缓冲区的操作，一般打开文件进行写入或读取操作时，都会加上缓冲，这种流模式，提高了IO的性能
            从应用程序中，把数据放入文件，相当于将一缸水，倒入到另一个缸中：
                FileOutputStream -----> write()方法，相当于将水"一滴一滴"地转移过去
                DataOutputStream -----> writeXxx()方法，会方便一些，相当于将水"一瓢一瓢"地转移过去
                BufferedOutputStream -----> write()方法，更方便，相当于将水先"一瓢一瓢"地放入桶中，再从桶中导入另一个缸
5.对象的序列化与反序列化